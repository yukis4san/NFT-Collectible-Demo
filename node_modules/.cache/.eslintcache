[{"/Users/yukis4san/nft-collectible-frontend/src/index.js":"1","/Users/yukis4san/nft-collectible-frontend/src/App.js":"2","/Users/yukis4san/nft-collectible-frontend/src/reportWebVitals.js":"3","/Users/yukis4san/nft-collectible-frontend/src/components/Header.js":"4","/Users/yukis4san/nft-collectible-frontend/src/components/Footer.js":"5"},{"size":500,"mtime":1644770888492,"results":"6","hashOfConfig":"7"},{"size":8447,"mtime":1644819190302,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1644770888493,"results":"9","hashOfConfig":"7"},{"size":595,"mtime":1644817561789,"results":"10","hashOfConfig":"7"},{"size":1402,"mtime":1644818350985,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n5zcdo",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/yukis4san/nft-collectible-frontend/src/index.js",[],[],"/Users/yukis4san/nft-collectible-frontend/src/App.js",["29","30"],[],"import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport squirrelImg from './assets/rinkeby_squirrels.gif';\nimport { ethers } from 'ethers';\nimport contract from './contracts/NFTCollectible.json';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\n// Constants\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/rinkeby-squirrels';\nconst MEDIUM_LINK = 'https://medium.com/scrappy-squirrels';\nconst contractAddress = \"0x7aDBc3497BE70a903c5b17BEf184782dD0A7eFAa\";\nconst abi = contract.abi;\n\nconst App = () => {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n  const [mineStatus, setMineStatus] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\")\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    const network = await ethereum.request({ method: 'eth_chainId' });\n\n    if (accounts.length !== 0 && network.toString() === '0x13881') {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account);\n      //setupEventListener();\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const network = await ethereum.request({ method: 'eth_chainId' });\n\n      if (network.toString() === '0x13881') {\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n      }\n\n      else {\n        setMetamaskError(true);\n      }\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintNFT = async () => {\n    try {\n\n      setMineStatus('mining');\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, { gasLimit: 160000, value: ethers.utils.parseEther(\"0.01\") });\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n        setMineStatus('success');\n\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist\");\n      }\n\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\n    }\n  }, [])\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => {\n    return (\n      <button onClick={mintNFT} className=\"cta-button connect-wallet-button\" >\n        Mint a Polygon Squirrel NFT\n      </button >\n    );\n  }\n\n  return (\n    <Fragment>\n      {metamaskError && <div className='metamask-error'>Please make sure you are connected to the Polygon Testnet on Metamask!</div>}\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header opensea={OPENSEA_LINK} />\n          <div className=\"header-container\">\n            <div className='banner-img'>\n              <img src={squirrelImg} alt=\"Polygon Squirrels\" />\n            </div>\n            {currentAccount && mineStatus !== 'mining' && renderMintUI()}\n            {!currentAccount && !mineStatus && renderNotConnectedContainer()}\n            <div className='mine-submission'>\n              {mineStatus === 'success' && <div className={mineStatus}>\n                <p>NFT minting successful!</p>\n                <p className='success-link'>\n                  <a href={`https://testnets.opensea.io/${currentAccount}/`} target='_blank' rel='noreferrer'>Click here</a>\n                  <span> to view your NFT on OpenSea.</span>\n                </p>\n              </div>}\n              {mineStatus === 'mining' && <div className={mineStatus}>\n                <div className='loader' />\n                <span>Transaction is mining</span>\n              </div>}\n              {mineStatus === 'error' && <div className={mineStatus}>\n                <p>Transaction failed. Make sure you have at least 0.01 MATIC in your Metamask wallet and try again.</p>\n              </div>}\n            </div>\n          </div>\n          {currentAccount && <div className='show-user-address'>\n          <p>\n            Your address being connected: &nbsp;\n            <br/>\n                <span>\n                    <a className='user-address' target='_blank' rel='noreferrer'>\n                        {currentAccount}\n                    </a>\n                </span>\n          </p>\n          </div>}\n          <Footer address={contractAddress} />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n\n\n// import { useEffect, useState } from 'react';\n// import './App.css';\n// import contract from './contracts/NFTCollectible.json';\n// import { ethers } from 'ethers';\n\n// const contractAddress = \"0x7aDBc3497BE70a903c5b17BEf184782dD0A7eFAa\";\n// const abi = contract.abi;\n\n// function App() {\n\n//   const [currentAccount, setCurrentAccount] = useState(null);\n\n//   const checkWalletIsConnected = async () => {\n//     const { ethereum } = window;\n\n//     if (!ethereum) {\n//       console.log(\"Make sure you have Metamask installed!\");\n//       return;\n//     } else {\n//       console.log(\"Wallet exists! We're ready to go!\")\n//     }\n\n//     const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n//     if (accounts.length !== 0) {\n//       const account = accounts[0];\n//       console.log(\"Found an authorized account: \", account);\n//       setCurrentAccount(account);\n//     } else {\n//       console.log(\"No authorized account found\");\n//     }\n//   }\n\n//   const connectWalletHandler = async () => {\n//     const { ethereum } = window;\n\n//     if (!ethereum) {\n//       alert(\"Please install Metamask!\");\n//     }\n\n//     try {\n//       const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n//       console.log(\"Found an account! Address: \", accounts[0]);\n//       setCurrentAccount(accounts[0]);\n//     } catch (err) {\n//       console.log(err)\n//     }\n//   }\n\n//   const mintNftHandler = async () => {\n//     try {\n//       const { ethereum } = window;\n\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n//         console.log(\"Initialize payment\");\n//         let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n\n//         console.log(\"Mining... please wait\");\n//         await nftTxn.wait();\n\n//         console.log(`Mined, see transaction: ${nftTxn.hash}`);\n\n//       } else {\n//         console.log(\"Ethereum object does not exist\");\n//       }\n\n//     } catch (err) {\n//       console.log(err);\n//     }\n//   }\n\n//   const connectWalletButton = () => {\n//     return (\n//       <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n//         Connect Wallet\n//       </button>\n//     )\n//   }\n\n//   const mintNftButton = () => {\n//     return (\n//       <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//         Mint NFT\n//       </button>\n//     )\n//   }\n\n//   useEffect(() => {\n//     checkWalletIsConnected();\n//   }, [])\n\n//   return (\n//     <div className='main-app'>\n//       <h1>Scrappy Squirrels Tutorial</h1>\n//       <div>\n//         {currentAccount ? mintNftButton() : connectWalletButton()}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default App;\n","/Users/yukis4san/nft-collectible-frontend/src/reportWebVitals.js",[],[],"/Users/yukis4san/nft-collectible-frontend/src/components/Header.js",[],[],["31","32"],"/Users/yukis4san/nft-collectible-frontend/src/components/Footer.js",[],[],{"ruleId":"33","severity":1,"message":"34","line":12,"column":7,"nodeType":"35","messageId":"36","endLine":12,"endColumn":18},{"ruleId":"37","severity":1,"message":"38","line":162,"column":21,"nodeType":"39","endLine":162,"endColumn":82},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},"no-unused-vars","'MEDIUM_LINK' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-global-assign","no-unsafe-negation"]