{"ast":null,"code":"var _jsxFileName = \"/Users/yukis4san/nft-collectible-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport squirrelImg from './assets/rinkeby_squirrels.gif';\nimport { ethers } from 'ethers';\nimport contract from './contracts/NFTCollectible.json';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport Footer from './components/Footer';\nimport Header from './components/Header'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/rinkeby-squirrels';\nconst MEDIUM_LINK = 'https://medium.com/scrappy-squirrels';\nconst contractAddress = \"0x7aDBc3497BE70a903c5b17BEf184782dD0A7eFAa\";\nconst abi = contract.abi;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n  const [mineStatus, setMineStatus] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    const network = await ethereum.request({\n      method: 'eth_chainId'\n    });\n\n    if (accounts.length !== 0 && network.toString() === '0x13881') {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account); //setupEventListener();\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const network = await ethereum.request({\n        method: 'eth_chainId'\n      });\n\n      if (network.toString() === '0x13881') {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n      } else {\n        setMetamaskError(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const mintNFT = async () => {\n    try {\n      setMineStatus('mining');\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, {\n          gasLimit: 160000,\n          value: ethers.utils.parseEther(\"0.01\")\n        });\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n        setMineStatus('success');\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', _chainId => window.location.reload());\n    }\n  }, []); // Render Methods\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNFT,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Mint a Polygon Squirrel NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [metamaskError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metamask-error\",\n      children: \"Please make sure you are connected to the Polygon Testnet on Metamask!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          opensea: OPENSEA_LINK\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner-img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: squirrelImg,\n              alt: \"Polygon Squirrels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), currentAccount && mineStatus !== 'mining' && renderMintUI(), !currentAccount && !mineStatus && renderNotConnectedContainer(), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mine-submission\",\n            children: [mineStatus === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mineStatus,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"NFT minting successful!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"success-link\",\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  href: `https://testnets.opensea.io/${currentAccount}/`,\n                  target: \"_blank\",\n                  rel: \"noreferrer\",\n                  children: \"Click here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" to view your NFT on OpenSea.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 44\n            }, this), mineStatus === 'mining' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mineStatus,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loader\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Transaction is mining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 43\n            }, this), mineStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mineStatus,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Transaction failed. Make sure you have at least 0.01 MATIC in your Metamask wallet and try again.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), currentAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-address\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Your ADDRESS connected:\\xA0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"user-address\",\n                target: \"_blank\",\n                rel: \"noreferrer\",\n                children: currentAccount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          address: contractAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"qmMhbDMgPscP3k4Z/M73DDcJv9c=\");\n\n_c = App;\nexport default App; // import { useEffect, useState } from 'react';\n// import './App.css';\n// import contract from './contracts/NFTCollectible.json';\n// import { ethers } from 'ethers';\n// const contractAddress = \"0x7aDBc3497BE70a903c5b17BEf184782dD0A7eFAa\";\n// const abi = contract.abi;\n// function App() {\n//   const [currentAccount, setCurrentAccount] = useState(null);\n//   const checkWalletIsConnected = async () => {\n//     const { ethereum } = window;\n//     if (!ethereum) {\n//       console.log(\"Make sure you have Metamask installed!\");\n//       return;\n//     } else {\n//       console.log(\"Wallet exists! We're ready to go!\")\n//     }\n//     const accounts = await ethereum.request({ method: 'eth_accounts' });\n//     if (accounts.length !== 0) {\n//       const account = accounts[0];\n//       console.log(\"Found an authorized account: \", account);\n//       setCurrentAccount(account);\n//     } else {\n//       console.log(\"No authorized account found\");\n//     }\n//   }\n//   const connectWalletHandler = async () => {\n//     const { ethereum } = window;\n//     if (!ethereum) {\n//       alert(\"Please install Metamask!\");\n//     }\n//     try {\n//       const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n//       console.log(\"Found an account! Address: \", accounts[0]);\n//       setCurrentAccount(accounts[0]);\n//     } catch (err) {\n//       console.log(err)\n//     }\n//   }\n//   const mintNftHandler = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const nftContract = new ethers.Contract(contractAddress, abi, signer);\n//         console.log(\"Initialize payment\");\n//         let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n//         console.log(\"Mining... please wait\");\n//         await nftTxn.wait();\n//         console.log(`Mined, see transaction: ${nftTxn.hash}`);\n//       } else {\n//         console.log(\"Ethereum object does not exist\");\n//       }\n//     } catch (err) {\n//       console.log(err);\n//     }\n//   }\n//   const connectWalletButton = () => {\n//     return (\n//       <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n//         Connect Wallet\n//       </button>\n//     )\n//   }\n//   const mintNftButton = () => {\n//     return (\n//       <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//         Mint NFT\n//       </button>\n//     )\n//   }\n//   useEffect(() => {\n//     checkWalletIsConnected();\n//   }, [])\n//   return (\n//     <div className='main-app'>\n//       <h1>Scrappy Squirrels Tutorial</h1>\n//       <div>\n//         {currentAccount ? mintNftButton() : connectWalletButton()}\n//       </div>\n//     </div>\n//   )\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yukis4san/nft-collectible-frontend/src/App.js"],"names":["React","useEffect","useState","squirrelImg","ethers","contract","Fragment","Footer","Header","OPENSEA_LINK","MEDIUM_LINK","contractAddress","abi","App","currentAccount","setCurrentAccount","metamaskError","setMetamaskError","mineStatus","setMineStatus","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","network","length","toString","account","connectWallet","alert","err","mintNFT","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","nftTxn","mintNFTs","gasLimit","value","utils","parseEther","wait","hash","on","_chainId","location","reload","renderNotConnectedContainer","renderMintUI"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport squirrelImg from './assets/rinkeby_squirrels.gif';\nimport { ethers } from 'ethers';\nimport contract from './contracts/NFTCollectible.json';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\n// Constants\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/rinkeby-squirrels';\nconst MEDIUM_LINK = 'https://medium.com/scrappy-squirrels';\nconst contractAddress = \"0x7aDBc3497BE70a903c5b17BEf184782dD0A7eFAa\";\nconst abi = contract.abi;\n\nconst App = () => {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n  const [mineStatus, setMineStatus] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\")\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    const network = await ethereum.request({ method: 'eth_chainId' });\n\n    if (accounts.length !== 0 && network.toString() === '0x13881') {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account);\n      //setupEventListener();\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const network = await ethereum.request({ method: 'eth_chainId' });\n\n      if (network.toString() === '0x13881') {\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n      }\n\n      else {\n        setMetamaskError(true);\n      }\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintNFT = async () => {\n    try {\n\n      setMineStatus('mining');\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, { gasLimit: 160000, value: ethers.utils.parseEther(\"0.01\") });\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n        setMineStatus('success');\n\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist\");\n      }\n\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\n    }\n  }, [])\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => {\n    return (\n      <button onClick={mintNFT} className=\"cta-button connect-wallet-button\" >\n        Mint a Polygon Squirrel NFT\n      </button >\n    );\n  }\n\n  return (\n    <Fragment>\n      {metamaskError && <div className='metamask-error'>Please make sure you are connected to the Polygon Testnet on Metamask!</div>}\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header opensea={OPENSEA_LINK} />\n          <div className=\"header-container\">\n            <div className='banner-img'>\n              <img src={squirrelImg} alt=\"Polygon Squirrels\" />\n            </div>\n            {currentAccount && mineStatus !== 'mining' && renderMintUI()}\n            {!currentAccount && !mineStatus && renderNotConnectedContainer()}\n            <div className='mine-submission'>\n              {mineStatus === 'success' && <div className={mineStatus}>\n                <p>NFT minting successful!</p>\n                <p className='success-link'>\n                  <a href={`https://testnets.opensea.io/${currentAccount}/`} target='_blank' rel='noreferrer'>Click here</a>\n                  <span> to view your NFT on OpenSea.</span>\n                </p>\n              </div>}\n              {mineStatus === 'mining' && <div className={mineStatus}>\n                <div className='loader' />\n                <span>Transaction is mining</span>\n              </div>}\n              {mineStatus === 'error' && <div className={mineStatus}>\n                <p>Transaction failed. Make sure you have at least 0.01 MATIC in your Metamask wallet and try again.</p>\n              </div>}\n            </div>\n          </div>\n          {currentAccount && <div className='user-address'>\n          <p>\n                Your ADDRESS connected:&nbsp;\n                <br/>\n                <span>\n                    <a className='user-address' target='_blank' rel='noreferrer'>\n                        {currentAccount}\n                    </a>\n                </span>\n            </p>\n\n          </div>}\n          <Footer address={contractAddress} />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n\n\n// import { useEffect, useState } from 'react';\n// import './App.css';\n// import contract from './contracts/NFTCollectible.json';\n// import { ethers } from 'ethers';\n\n// const contractAddress = \"0x7aDBc3497BE70a903c5b17BEf184782dD0A7eFAa\";\n// const abi = contract.abi;\n\n// function App() {\n\n//   const [currentAccount, setCurrentAccount] = useState(null);\n\n//   const checkWalletIsConnected = async () => {\n//     const { ethereum } = window;\n\n//     if (!ethereum) {\n//       console.log(\"Make sure you have Metamask installed!\");\n//       return;\n//     } else {\n//       console.log(\"Wallet exists! We're ready to go!\")\n//     }\n\n//     const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n//     if (accounts.length !== 0) {\n//       const account = accounts[0];\n//       console.log(\"Found an authorized account: \", account);\n//       setCurrentAccount(account);\n//     } else {\n//       console.log(\"No authorized account found\");\n//     }\n//   }\n\n//   const connectWalletHandler = async () => {\n//     const { ethereum } = window;\n\n//     if (!ethereum) {\n//       alert(\"Please install Metamask!\");\n//     }\n\n//     try {\n//       const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n//       console.log(\"Found an account! Address: \", accounts[0]);\n//       setCurrentAccount(accounts[0]);\n//     } catch (err) {\n//       console.log(err)\n//     }\n//   }\n\n//   const mintNftHandler = async () => {\n//     try {\n//       const { ethereum } = window;\n\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n//         console.log(\"Initialize payment\");\n//         let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n\n//         console.log(\"Mining... please wait\");\n//         await nftTxn.wait();\n\n//         console.log(`Mined, see transaction: ${nftTxn.hash}`);\n\n//       } else {\n//         console.log(\"Ethereum object does not exist\");\n//       }\n\n//     } catch (err) {\n//       console.log(err);\n//     }\n//   }\n\n//   const connectWalletButton = () => {\n//     return (\n//       <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n//         Connect Wallet\n//       </button>\n//     )\n//   }\n\n//   const mintNftButton = () => {\n//     return (\n//       <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//         Mint NFT\n//       </button>\n//     )\n//   }\n\n//   useEffect(() => {\n//     checkWalletIsConnected();\n//   }, [])\n\n//   return (\n//     <div className='main-app'>\n//       <h1>Scrappy Squirrels Tutorial</h1>\n//       <div>\n//         {currentAccount ? mintNftButton() : connectWalletButton()}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}